export default [
  {
    type: 'BEGINCOMMENT',
    reg: /^\/\*/,
    begin: 'COMMENT',
  },
  {
    type: 'NEWLINE',
    reg: /^[\n\r]/,
    cb: lex => {
      lex.line += 1
      lex.col = 0
      // If set to true newlines are tokenized and used for automated semicolon insertion
      return true
    },
  },
  ['SEMI', /^;/],
  ['THIS', /^this/],
  {
    type: 'NULL',
    reg: /^null/,
    value: v => null,
  },
  ['FALSE', /^false/],
  ['TRUE', /^true/],
  {
    type: 'NUMBER',
    reg: /^[0-9]+(?:\.?[0-9]+)*/,
    value: num => parseFloat(num),
  },
  {
    type: 'STRING',
    reg: /^((?:"(?:[^"\\]|(?:\\.))*")|'(?:[^'\\]|(?:\\.))*')/,
    value: str => str.slice(1, -1),
  },
  ['SWITCH', 'switch'],
  ['CASE', 'case'],
  ['DEFAULT', 'default'],
  ['NEW', 'new'],
  ['DO', 'do'],
  ['WHILE', 'while'],
  ['FUNCTION', 'function'],
  ['RETURN', 'return'],
  ['BREAK', 'break'],
  ['CONTINUE', 'continue'],
  ['VOID', 'void'],
  ['DELETE', 'delete'],
  ['IF', /^if/],
  ['ELSE', /^else/],
  ['FOR', /^for/],
  ['VAR', 'var'],
  ['COMMA', /^,/],
  ['DOT', /^\./],
  ['PERIOD', /^\:/],
  ['IN', /^in\b/],
  ['OF', /^of\b/],
  ['TYPEOF', /^typeof\b/],
  ['INSTANCEOF', 'instanceof'],
  ['PLUSIS', /^\+=/],
  ['MULTIPLY', /^\*/],
  ['DIVIDE', /^\//],
  ['INCREMENT', /^\+{2}/],
  ['MODULUS', /^\%/],
  ['PLUS', /^\+/],
  ['DECREMENT', /^\-{2}/],
  ['MINUS', /^\-/],
  ['TENARY', /^\?/],
  ['NOTSTRICTEQUAL', /^\!==/],
  ['STRICTEQUAL', /^===/],
  ['EQUALEQUAL', /^==/],
  ['NOTEQUAL', /^\!=/],
  ['LOGNOT', /^\!/],
  ['EQUAL', /^=/],
  ['LT', /^</],
  ['LTEQ', /^<=/],
  ['GT', /^>/],
  ['GTEQ', /^>=/],
  ['LOGOR', /^\|{2}/],
  ['XLOGOR', /^\^/],
  ['LOGAND', /^&{2}/],
  ['BINOR', /^\|{1}/],
  ['NOT', /^~/],
  ['BINAND', /^&{1}/],
  ['LPAREN', /^\(/],
  ['RPAREN', /^\)/],
  ['LCBRACE', /^\{/],
  ['RCBRACE', /^\}/],
  ['LBRACK', /^\[/],
  ['RBRACK', /^\]/],
  ['IDENTIFIER', /^[$a-zA-Z]+(?:[a-zA-Z_\-]+)*/],
]
